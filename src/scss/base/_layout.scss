*,
*::before,
*::after {
	box-sizing: inherit;
}

// Clears
%clearfix {
	&::before,
	&::after {
		content: "";
		display: table;
	}
}

%clearfix::after {
	clear: both;
}

%spacing-reset {
	margin: 0;
	padding: 0;
}

.clearfix {
	@extend %clearfix;
}

section {
	position: relative;
	@extend %clearfix;
}

$grid--standard: (
	columns: 12,  // The number of columns in your grid
	gutters: 1 / 4, // The size of a gutter in relation to a single column
);

$grid--no-gutters: ( 
	columns: 12, // The number of columns in your grid
	gutters: 0, // The size of a gutter in relation to a single column
);

///////////// Layouts Utilities ////////////////
$max-widths: ( 
	'x-large': 1440,
	'large': 1240,
	'medium': 800,
	'small': 300
);

/**
  * Get Max Width function
  *
  * Used to create consistency across max width values.
  *
  * @param {String} $name Name of the max width found in the $max-width sass map.
  * @returns {Number}
  */
@function get-maxWidth($name) {
	@return map-get($max-widths, $name) * 1px;
}

$spacers: ( 
	'large': (3rem, 3.5rem, 4rem, 4.5rem, 6rem, 7rem),
	'medium': (2rem, 2.5rem, 3rem, 4rem, 4.5rem, 5rem),
	'small': (.5rem, .5rem, 1rem, 1.5rem, 1.75rem, 2rem)
);

/**
  * Get Spacer function
  *
  * Used to create consistency across spacing.
  *
  * @param {String} $name Name of the spacer found in the $spacers sass map. Current uses the middle value (3).
  * @returns {Number}
  */
@function get-spacer($size) {
	@return nth(map-get($spacers, $size), 3);
}


/**
  * Generate spacer utility classes using the $spacers sass map.
  *
  * Each utility class gets a name value from the key then loops
  * through each breakpoint set it $breakpoints and applied the
  * value of the named spacer index value === index value of
  * breakpoint. So 'small' being the first breakpoint it gets the
  * first value from the current spacer value set.
  */


$spacingTypes: map-keys($spacers);
@each $spacer in $spacingTypes {
	.spacer-#{$spacer} {
		$breakpointSizes: map-keys($breakpoints);
		padding: nth(map-get($spacers, $spacer), 1);


		$counter: 1;
		@each $breakpoint in $breakpointSizes {
			@media (get-breakpoint($breakpoint)) {
				padding: nth(map-get($spacers, $spacer), $counter);
			}
			$counter: $counter + 1;
		}
	}
	.spacer-sides-#{$spacer} {
		$breakpointSizes: map-keys($breakpoints);
		padding: 0 nth(map-get($spacers, $spacer), 1);

		$counter: 1;
		@each $breakpoint in $breakpointSizes {
			@media (get-breakpoint($breakpoint)) {
				padding: 0 nth(map-get($spacers, $spacer), $counter);
			}
			$counter: $counter + 1;
		}
	}

	.spacer-bottom-#{$spacer} {
		$breakpointSizes: map-keys($breakpoints);

		margin-bottom: nth(map-get($spacers, $spacer), 1);

		$counter: 1;
		@each $breakpoint in $breakpointSizes {
			@media (get-breakpoint($breakpoint)) {
				margin-bottom: nth(map-get($spacers, $spacer), $counter);
			}
			$counter: $counter + 1;
		}
	}
}

///////////// Layouts ////////////////

$navigation-width: 240px;

.navigation + div {
	margin: get-spacer('small') auto;
	width: 90%;
	margin-top: 90px;

	@media (get-breakpoint('small')) {
		margin: get-spacer('large') auto;
	}
}

@media (get-breakpoint('large')) {
	.navigation + div {
		padding-left: $navigation-width;
	}
}


%layout--two-one--base-small > .rc-column {
	& > img,
	& > figure > img {
		margin: 0 auto;
	}
}

.layout--one-two {
	@extend %layout--two-one--base-small;
}

.layout--two-one {
	@extend %layout--two-one--base-small;
}

.vertical-align {
	position: absolute;
	top: 50%;
	transform: translateY(-50%);
}

.horizontal-align {
	position: absolute;
	left: 50%;
	transform: translateX(-50%);
}

.center-align {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translateY(-50%) translateX(-50%);
}

%stick {
	position: absolute;
}

.stick-left {
	@extend %stick;
	left: 0;
	right: auto;
}

.stick-right {
	@extend %stick;
	right: 0;
	left: auto;
}

%show-at-large-only {
	display: none;

	@media (get-breakpoint('large')) {
		display: block;
	}
}

.show-at-large-only {
	@extend %show-at-large-only;
}

.max-width--large {
	max-width: get-maxWidth('large');
	margin-left: auto;
	margin-right: auto;
}

.max-width--x-large {
	max-width: get-maxWidth('x-large');
	margin-left: auto;
	margin-right: auto;
}


.text-column-padding-right {
	@media (get-breakpoint('large')) {
		padding-right: get-spacer('medium');
	}
}

.hidden-panel {
	display: none;
	
	&.open {
	  display: block;
	}
}